unit SplitSocket;

interface

uses
  {$ifdef Lazarus}TCPSocket_Lazarus{$else}TCPSocket{$endif}, StatusThread, SysUtils, Classes,
    Windows, Contnrs, SyncObjs;

type
  ETimeOut = Exception;
  TProcessIndex = Word;
  TSocketMultiplexHeader = packed record
    ProcessIndex: TProcessIndex;
    Size: Word;
  end;
  PSplitSocketPacket = ^TSplitSocketPacket;
  TSplitSocketPacket = record
    Header: TSocketMultiplexHeader;
    Data: pointer;
  end;
  TSplitSocket = class
  private
    PacketQueue: TQueue;
    LockPacketQueue: TEvent;
    BufferedPackets: TEvent;
    FHostSocket: TObject;
    FMaster: Boolean;
    procedure NewPacket(Sender: TObject; Header: TSocketMultiplexHeader;
      Data: pointer; WorkAt: Integer);
  public
    WorkProcessIndex: TProcessIndex;
    OnNewPacket_ReadThread: TNotifyEvent;
    OnDestroy: TNotifyEvent;
    property Master: Boolean read FMaster;
    property HostSocket: TObject read FHostSocket;
    constructor Create(AHostSocket: TObject; AMaster: Boolean);
    destructor Destroy; override;
    procedure SendPacket(var Data; Size: Word);
    procedure RecvPacket(var Data: pointer; var Size: Word; const TimeOut: Cardinal = high(cardinal));
    function GetPacket(var Data: pointer; var Size: Word): Boolean;
  end;
  TSocketMultiplexOpeningTunnel = procedure(Sender: TObject; Tunnel: TSplitSocket; var Accept: Boolean) of Object;
  TSocketMultiplexOpenedTunnel = procedure(Sender: TObject; Tunnel: TSplitSocket) of object;
  TSocketMultiplex = class(TSThread)
  private
    CanWrite: TEvent;
    FTunnel: TThreadList;
    Socket: TTCPSocket;
    FMaster: Boolean;
    procedure SendPacketAtSplitSocket(Header: TSocketMultiplexHeader;
      Data: pointer; WorkAt: Integer; ASocket: TSplitSocket);
    procedure AddTunnel(tunnel: TSplitSocket);
    procedure DoUnusedPacket(Header: TSocketMultiplexHeader; Data: pointer);
  public
    OnNoConnection: TNotifyEvent;
    OnOpeningTunnel: TSocketMultiplexOpeningTunnel;
    OnOpenedTunnel: TSocketMultiplexOpenedTunnel;
    constructor Create(ASocket: TTCPSocket; AMaster: Boolean);
    procedure Execute; override;
    destructor Destroy; override;
    procedure SendBuf(var Buf; Size, ProcessIndex: Word);
    function OpenTunnel(PI: Integer; var Tunnel: TSplitSocket): Boolean;
    function AddTunnelEnd(PI: TProcessIndex): TSplitSocket;
    procedure Close;
    function SplitSocketList: TThreadList;
    property Master: Boolean read FMaster;
  end;

const TimeOut = 3000;

implementation

uses DateUtils, ComObj, Math;

procedure TSocketMultiplex.SendBuf(var Buf; Size, ProcessIndex: Word);
var Header: TSocketMultiplexHeader;
begin
  Header.Size := Size;
  Header.ProcessIndex := ProcessIndex;

  if (CanWrite.WaitFor(TimeOut) = wrSignaled) then
    try
      while not Socket.SelectWrite(1000) do
        sleep(100);

      //if Terminated then raise Exception.Create('API: SendBuf, ReadThread wurde terminiert!');

      Socket.SendBuf(Header,sizeof(Header));
      if Size > 0 then Socket.SendBuf(Buf,Size);

    finally
      CanWrite.SetEvent;
    end else raise Exception.Create('API: SendBuf, Timeout beim Warten auf Schreiberlaubnis');
end;

constructor TSocketMultiplex.Create(ASocket: TTCPSocket; AMaster: Boolean);
begin
  inherited Create(False);
  FMaster := AMaster;
  Socket := ASocket;
  FTunnel := TThreadList.Create;
  CanWrite := TEvent.Create(nil,False,True,'');

  FreeOnTerminate := True;
end;

destructor TSocketMultiplex.Destroy;
var i: integer;
begin
  FreeOnTerminate := False;
  Terminate;
  Socket.Close;
  Resume;
  if ReturnValue = STILL_ACTIVE then
    WaitFor;

  with FTunnel.LockList do
  try
    for i := 0 to Count-1 do
    begin
      TSplitSocket(Items[i]).Free;
    end;
  finally
    FTunnel.UnlockList;
  end;

  CanWrite.Free;
  Socket.Free;
  FTunnel.Free;
  inherited;
end;

procedure TSocketMultiplex.Execute;
var NextHeader: TSocketMultiplexHeader;
    i, WorkAt: integer;
    data: pointer;
begin
  inherited;

  ReturnValue := STILL_ACTIVE;
  try
    while (not Terminated)and(Socket.Connected) do
    begin
      Status := 'Read ...';
      Socket.ReceiveBuf(NextHeader,sizeof(NextHeader));   //Warten auf Packet
      GetMem(data,NextHeader.Size);
      Socket.ReceiveBuf(data^,NextHeader.Size);

      WorkAt := 0;
      OutputDebugString(PChar('ThreadID: ' + InttoStr(ThreadID) + ' (TSocketMultiplex.Execute) FTunnel.LockList'));
      with FTunnel.LockList do
      try
        OutputDebugString(PChar('ThreadID: ' + InttoStr(ThreadID) + ' (TSocketMultiplex.Execute) LockedList'));
        for i := 0 to Count-1 do
        begin
          if (NextHeader.ProcessIndex = TSplitSocket(Items[i]).WorkProcessIndex) then
          begin
            Status := 'Work on Packet...[' + IntToStr(i) + ']->' + IntToStr(NextHeader.ProcessIndex);
            OutputDebugString(PChar('ThreadID: ' + InttoStr(ThreadID) + ' (TSocketMultiplex.Execute) SendPacketAtSplitSocket_vorher'));
            SendPacketAtSplitSocket(NextHeader,data,WorkAt,TSplitSocket(Items[i]));
            OutputDebugString(PChar('ThreadID: ' + InttoStr(ThreadID) + ' (TSocketMultiplex.Execute) SendPacketAtSplitSocket_nacher'));
            inc(WorkAt);
          end;
        end;
      finally
        FTunnel.UnlockList;
        OutputDebugString(PChar('ThreadID: ' + InttoStr(ThreadID) + ' (TSocketMultiplex.Execute) FTunnel.UnLockList'));
      end;

      if (WorkAt = 0) then
        DoUnusedPacket(NextHeader,Data);
    end;
  except
    on E: Exception do
    begin
      Status := 'Exception in ' + Name + ':' + E.Message + ' (' + E.ClassName + ')';
      If Assigned(OnException) then OnException(Self,E,Status);
    end;
  end;
  
  if Assigned(OnNoConnection) then
  {$ifndef Lazarus}
    SynchronizeNotifyEvent(OnNoConnection,Self);
  {$else}
    OnNoConnection(Self);
  {$endif}

  ReturnValue := 0;
end;

constructor TSplitSocket.Create(AHostSocket: TObject; AMaster: Boolean);
begin
  inherited Create;
  FMaster := AMaster;
  FHostSocket := AHostSocket;
  PacketQueue := TQueue.Create;
  LockPacketQueue := TEvent.Create(nil,False,True,'');
  BufferedPackets := TEvent.Create(nil,True,False,'');
end;

destructor TSplitSocket.Destroy;
var p: pointer;
    s: word;
begin
  if Assigned(OnDestroy) then
    OnDestroy(Self);

  while GetPacket(p,s) do //übrige Packete Freigeben!!
    FreeMem(p);

  LockPacketQueue.Free;
  PacketQueue.Free;
  inherited;
end;

{###############################################################################
 TSplitSocket.GetPacket

 Liest, falls vorhanden, das nächste Packet. Wenn kein Packet mehr im "Buffer"
 ist, gibt die Funktion False zurück!

 Diese Funktion Blockiert nicht!
###############################################################################}
function TSplitSocket.GetPacket(var Data: pointer; var Size: Word): Boolean;
var Packet: PSplitSocketPacket;
begin
  if LockPacketQueue.WaitFor(high(cardinal)) = wrSignaled then       //warten bis queue freigegeben, sollte normal nicht lange dauern! (timeout zwecklos!) evtl. critical section!?
  begin
    try
      Result := PacketQueue.Count > 0;     //checken ob Packet vohanden!
      if Result then
      begin
        Packet := PacketQueue.Pop;
        Size := Packet^.Header.Size;
        Data := Packet^.Data;
        FreeMem(Packet);
      end;
    finally
      LockPacketQueue.SetEvent;
    end;
  end
  else raise Exception.Create('TSplitSocket.GetPacket: ERROR while waiting for LockPacketQueue');
end;

procedure TSplitSocket.NewPacket(Sender: TObject;
  Header: TSocketMultiplexHeader; Data: pointer; WorkAt: Integer);
var Packet: PSplitSocketPacket;
begin
  GetMem(Packet,Sizeof(Packet));
  Packet^.Header := Header;
  Packet^.Data := Data;

  OutputDebugString('TSplitSocket.NewPacket LockPacketQueue.WaitFor');
  if LockPacketQueue.WaitFor(TimeOut) = wrSignaled then
  begin
    try
      OutputDebugString('TSplitSocket.NewPacket PacketQueue.Push');
      PacketQueue.Push(Packet);
      BufferedPackets.SetEvent;                 //Melden, das wieder Packete gibt!
    finally
      LockPacketQueue.SetEvent;
      OutputDebugString('TSplitSocket.NewPacket LockPacketQueue.SetEvent');
    end;

    OutputDebugString('TSplitSocket.NewPacket On.... start');
    if Assigned(OnNewPacket_ReadThread) then
      OnNewPacket_ReadThread(Self);
    OutputDebugString('TSplitSocket.NewPacket On....MainThread');
    {if Assigned(OnNewPacket_MainThread) then
      TSocketMultiplex(Sender).SynchronizeNotifyEvent(OnNewPacket_MainThread,Self);}
    OutputDebugString('TSplitSocket.NewPacket On.... ende');
      
  end
  else raise Exception.Create('TSplitSocket.NewPacket: Timeout waiting for LockPacketQueue');
end;

procedure TSocketMultiplex.SendPacketAtSplitSocket(Header: TSocketMultiplexHeader;
  Data: pointer; WorkAt: Integer; ASocket: TSplitSocket);
begin
  try
    OutputDebugString(PChar('ThreadID: ' + InttoStr(ThreadID) + ' (TSocketMultiplex.SendPacketAtSplitSocket) ASocket.NewPacket_davor'));
    ASocket.NewPacket(Self,Header,Data,WorkAt);
    OutputDebugString(PChar('ThreadID: ' + InttoStr(ThreadID) + ' (TSocketMultiplex.SendPacketAtSplitSocket) Socket.NewPacket_dannach'));
  except
    on E: Exception do
    begin
      Status := 'Exception in ' + Name + ':' + E.Message + ' (' + E.ClassName + ')';
      If Assigned(OnException) then OnException(Self,E,Status);
    end;
  end;
end;

{###############################################################################
 TSplitSocket.RecvPacket

 Liest das nächste Packet. Wenn nötig wird solange blockiert bis ein Packet
 vorhanden ist!
 Is quasi der Blockierende Socketaufruf.
###############################################################################}
procedure TSplitSocket.RecvPacket(var Data: pointer; var Size: Word; const TimeOut: Cardinal = high(cardinal));
var ready: Boolean;
begin
  ready := False;
  while not ready do
  begin
    case BufferedPackets.WaitFor(TimeOut) of
    wrSignaled:
      begin
        ready := GetPacket(Data,Size);
        if not ready then                                         //wenn keine gelesen wurden, gibts auch keine mehr! -> warten
          BufferedPackets.ResetEvent;
      end;
    wrTimeout: raise ETimeOut.Create('TSplitSocket.RecvPacket: Timeout waiting for BufferedPackets');
    else raise Exception.Create('TSplitSocket.RecvPacket: ERROR while waiting for BufferedPackets');
    end;
  end;
end;

procedure TSplitSocket.SendPacket(var Data; Size: Word);
begin
  with FHostSocket as TSocketMultiplex do
  begin
    SendBuf(Data,Size,WorkProcessIndex);
  end;
end;

function TSocketMultiplex.OpenTunnel(PI: Integer; var Tunnel: TSplitSocket): Boolean;
var call: byte;
    p: pointer;
    s: word;
begin
  OutputDebugString(PChar('ThreadID: ' + IntToStr(gThreadID) + ' OpenTunnel' + IntToStr(PI) + '_Start'));

  tunnel := TSplitSocket.Create(Self, True);
  tunnel.WorkProcessIndex := PI;
  AddTunnel(tunnel);
  call := 0;
  tunnel.SendPacket(call,Sizeof(call));
  tunnel.RecvPacket(p,s);
  call := Byte(p^);
  FreeMem(p);
  Result := call = 1;
  if not Result then
  begin
    tunnel.Free;
  end else if Assigned(OnOpenedTunnel) then
             OnOpenedTunnel(Self,Tunnel);

  OutputDebugString(PChar('ThreadID: ' + IntToStr(gThreadID) + ' OpenTunnel' + IntToStr(PI) + '_Ende'));
end;

procedure TSocketMultiplex.AddTunnel(tunnel: TSplitSocket);
begin
  tunnel.FHostSocket := self;  //wird eigentlich schon bei
    //TSplitSocket.Create gemacht!
  FTunnel.Add(tunnel);
end;

function TSocketMultiplex.AddTunnelEnd(PI: TProcessIndex): TSplitSocket;
var tunnel: TSplitSocket;
begin
  tunnel := TSplitSocket.Create(Self, False);
  tunnel.WorkProcessIndex := PI;
  AddTunnel(tunnel);
  Result := tunnel;
end;

procedure TSocketMultiplex.Close;
begin
  Socket.Close;
end;

function TSocketMultiplex.SplitSocketList: TThreadList;
begin
  Result := FTunnel;
end;

procedure TSocketMultiplex.DoUnusedPacket(Header: TSocketMultiplexHeader;
  Data: pointer);
var NewTunnel: TSplitSocket;
    Accept: Boolean;
begin
  Status := 'Work on unused Packet...[Try to open new tunnel]->'
                     + IntToStr(Header.ProcessIndex);

  if (Header.Size = Sizeof(Byte))and(Byte(Data^) = 0) then
  begin
    NewTunnel := TSplitSocket.Create(Self, False);
    NewTunnel.WorkProcessIndex := Header.ProcessIndex;

    Accept := True;
    if Assigned(OnOpeningTunnel) then
      OnOpeningTunnel(Self,NewTunnel,Accept);

    if Accept then
    begin
      Byte(Data^) := 1;
      NewTunnel.SendPacket(Data^,Sizeof(Byte));
      AddTunnel(NewTunnel);
      Status := '[New Tunnel Accepted]->'
                       + IntToStr(Header.ProcessIndex);
      If Assigned(OnOpenedTunnel) then
        OnOpenedTunnel(Self,NewTunnel); 
    end
    else
    begin
      Byte(Data^) := 0;
      NewTunnel.SendPacket(Data^,Sizeof(Byte));
      NewTunnel.Free;
      Status := '[New Tunnel Denied]->'
                       + IntToStr(Header.ProcessIndex);
    end;
  end
  else Status := '[New Tunnel Failed]->'
                       + IntToStr(Header.ProcessIndex);
                       
  FreeMem(Data);
end;

end.
