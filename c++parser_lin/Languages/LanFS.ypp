%pure-parser
%name-prefix="LanFS_"
%locations
%defines
%error-verbose
%parse-param { LanFS_Context* context }
%lex-param { void* scanner  }

%{
    #include <stdio.h>
    #include "Global.h"
    #include "Symbols.h"

    #include "ast_node_global_def_include.h"
    #include "ast_node_types.hpp"
    #include "ast_nodes_impl.hpp"
    #include "ast_nodes_flow.hpp"
    #include "ast_nodes_func.hpp"
    #include "ast_nodes_ops.hpp"
    #include "factory_ast_node_global_def.h"
%}

%union {
    int i;
    std::string *txt;
    ast_node_global_def* gDef;
    ast_node_global_defList *gDefList;
    ast_node_statement *stmt;
    ast_node_statement_value_expr* stmtExpr;
    ast_node_statementlist *stmtList;
    ast_node_value_expr *valExpr;
    ast_node_lvalue_expr *lvalExpr;
    ast_node_exprlist *exprL;
    ast_node_parlist *parL;
    ast_node_declaration_var *varDecl;
    ast_node_constIntList *constL;
    SymbolType* typeSym;
    SymbolVar* varSym;
    SymbolFunc* funcSym;
}

%token <i> ZAHL
%token <txt> NAME PP_INCLUDE

// Andi
%token ADD SUB MUL DIV END
%token CMPL CMPG CMPLE CMPGE CMPEQ CMPNE ASSIGNOP ASSIGNOPG ASSIGNOPP ASSIGNOPPG /* ASSIGN OP(ERATOR) P(OINTER) G(LOBAL) */

// Benny asm_nodes_control_structures
%token WHILE FOR IF ELSE DO VOIDDEF INTDEF INTPDEF INTVECDEF INTVECPDEF INTVECARRDEF KW_RETURN KW_UNSIGNED KW_LONG KW_INT KW_CHAR

// Ewald
%token FUNCTIONDEF FUNCTIONCALL PARLIST PAR PRGM STMTLIST STMT BLOCK TERM FAKT KLAMMER DEFLIST EXPR EXPRLIST
%token ASM PUSH POP IMUL


%nonassoc L_THEN
%nonassoc ELSE

%type <varDecl> var_def

%type <stmtList> stmt_list
%type <stmt> stmt ctrlStmt

%type <valExpr> exprA exprB exprC exprD funcCall assignment
%type <exprL> expr_list
%type <parL> paramList
%type <typeSym> atype
%type <lvalExpr> lvalue
%type <stmtExpr> stmtExpr

%{
    #include <iostream>
    #include <sstream>
    #include "LanAB_Context.h"
    #include "LanFS_Context.h"

    using namespace std;

    int LanFS_lex(YYSTYPE* lvalp, YYLTYPE* llocp, void* scanner);

    void LanFS_error(YYLTYPE* locp, LanFS_Context* context, const char* err)
    {
        context->yy_error(err);
    }

    #define scanner context->scanner
%}

%%

function_body:  stmt_list
;


var_def:        atype NAME var_def_end
;

var_def_end:    ';'
|               '=' init_value ';'
|               '(' expr_list ')' ';'
;

init_value:     '{' expr_list '}'
|               exprA
;

// Ausdruck der einen Typ beschreibt
atype:	    NAME		{ $$ = context->symbContext->findSymbolT<SymbolType>(*$1);
				  delete $1; }
	    | atype '*'    { $$ = new SymbolTypePtr($1); }
	    ;

paramList:	paramList ',' var_def    { $$ = $1;
				      $$->addChild($3); }
        | var_def                { $$ = new ast_node_parlist(NULL);
				      $$->addChild($1); }
	    |                       { $$ = new ast_node_parlist(NULL); };
			;


stmt_list:      stmt_list stmt      { $1->addChild($2); $$ = $1; }
|               /* nix */           { $$ = new ast_node_statementlist(NULL); }
;


// Statements werden in einer Funktion aufgerufen.
stmt:
          var_def ';'       { $$ = new ast_node_statement_var_def($1, NULL); }
	      | ctrlStmt       { $$ = $1; }
	      | stmtExpr ';'   { $$ = $1; }
	      | ';'            { $$ = new ast_node_statementlist(NULL); }
	      ;

stmtExpr:     exprA        { $$ = new ast_node_statement_value_expr($1, NULL); }
	      ;

ctrlStmt:
	      WHILE '(' exprA ')' stmt                        { $$ = new ast_node_while($3, $5, NULL); }
	      | DO stmt WHILE '(' exprB ')' ';'               { $$ = new ast_node_do($5, $2, NULL); }
	      | FOR '(' stmt exprA ';' stmtExpr ')' stmt      { $$ = new ast_node_for($3, $4, $6, $8, NULL); }
	      | IF '(' exprA ')' stmt ELSE stmt               { $$ = new ast_node_if_else($3, $5, $7, NULL); }
	      | IF '(' exprA ')' stmt %prec L_THEN            { $$ = new ast_node_if_else($3, $5, NULL, NULL); }
	      | KW_RETURN exprA ';'                           { $$ = new ast_node_return($2, NULL); }
          | blockBegin stmt_list blockEnd                  { $$ = new ast_node_stmtBlock($2, NULL); }
	    ;

blockBegin: 	'{'             { context->beginNewSymbContext(); }
		;

blockEnd:   	'}'             { context->endSymbContext(); }
		;

exprA:
	    assignment          { $$ = $1; }
	    | exprB             { $$ = $1; }
			;

assignment:
	    lvalue '=' exprA    { $$ = new ast_node_assignment($1, $3, NULL); }
	    ;

lvalue:
	    NAME                { $$ = new ast_node_identifier(
					    context->symbContext->findSymbolT<SymbolVar>(*$1),
					    NULL);
				  delete $1; }
	    | '*' exprB         { $$ = new ast_node_deref_op($2, NULL); }
	    ;

exprB:      exprB CMPL exprC        { $$ = new ast_node_op("<", $1, $3, NULL); }
	    | exprB CMPG exprC      { $$ = new ast_node_op(">", $1, $3, NULL); }
	    | exprB CMPLE exprC     { $$ = new ast_node_op("<=", $1, $3, NULL); }
	    | exprB CMPGE exprC     { $$ = new ast_node_op(">=", $1, $3, NULL); }
	    | exprB CMPEQ exprC     { $$ = new ast_node_op("==", $1, $3, NULL); }
	    | exprB CMPNE exprC     { $$ = new ast_node_op("!=", $1, $3, NULL); }
	    | exprB '+' exprC       { $$ = new ast_node_op("+", $1, $3, NULL); }
	    | exprB '-' exprC       { $$ = new ast_node_op("-", $1, $3, NULL); }
	    | exprC                 { $$ = $1; }
	    ;

exprC:
	    exprC '*' exprD         { $$ = new ast_node_op("*", $1, $3, NULL); }
	    | exprC '/' exprD       { $$ = new ast_node_op("/", $1, $3, NULL); }
	    | exprD                 { $$ = $1; }
	    ;

exprD:		'(' exprA ')'       { $$ = $2; }
	    | ZAHL              { $$ = new ast_node_constant_int($1, NULL); }
	    | lvalue            { $$ = $1; }
	    | '&' lvalue        { $$ = new ast_node_addr_op($2, NULL); }
	    | funcCall          { $$ = $1; }
			;

funcCall:   NAME '(' expr_list ')'     { $$ = new ast_node_functioncall(
						    context->symbContext->findSymbolT<SymbolFunc>(*$1),
						    $3, NULL);
					delete $1; }
	    ;

expr_list:      expr_list ',' exprA              { $1->addChild(new ast_node_expression($3, NULL)); $$ = $1; }
|               exprA                         { $$ = new ast_node_exprlist(NULL);
					      $$->addChild(new ast_node_expression($1, NULL)) }
			;
