%{
#include <string>
#include "LanAB_Context.h"
%}

%pure-parser
%name-prefix="LanAB_"
%locations
%defines
%error-verbose
%parse-param { LanAB_Context* context }
%lex-param { void* scanner  }

%union
{
    int _int;
	std::string* text;
    condition* _condition;
    std::vector<condition*>* _condition_vec;
}

%token <text> TEXT NAME K_IDENT
%token ERR
%token IFDEF IFNDEF INCLUDE ENDLINE ENDIF ELSE MACRO_END

%token <text> MACRO_BEGIN K_PARAM K_DEFINE K_DEFINE_VALUE K_DEFINE_VALUE_ENDLINE K_DEFINE_VALUE_ESC_ENDLINE K_UNDEF

%type <text> a_define_value define_value

%token CMD_IF K_IF_END K_DEFINED OP_AND OP_OR OP_GE OP_SE OP_EQ CMD_ELIF
%type <_condition> condition conditionA
%type <_condition_vec> condition_list
%token <text> K_NUMBER K_NUMBER_L

%token CMD_ERROR K_MESSAGE_START
%token <text> K_MESSAGE_END

%{
    #include <iostream>
    #include <sstream>
    #include "LanAB_Context.h"
    #include "LanCD_Context.h"

    using namespace std;

    int LanAB_lex(YYSTYPE* lvalp, YYLTYPE* llocp, void* scanner);

    void LanAB_error(YYLTYPE* locp, LanAB_Context* context, const char* err)
    {
        context->yy_error(err);
    }

    #define scanner context->scanner
%}

%%

start:	code
	;

code:	code line
	|
	;

line:
	  TEXT
		{
            context->text(*$1);
		    delete $1;
		}
    | K_IDENT
        {
            context->ident(*$1);
            delete $1;
        }
	| IFDEF NAME ENDLINE
		{
		    context->if_def(*$2);
            context->endline();
            delete $2;
		}
    | K_UNDEF NAME ENDLINE
        {
            context->undef(*$2);
            context->endline();
            delete $2;
        }
    | IFNDEF NAME ENDLINE
		{
            context->if_n_def(*$2);
            context->endline();
		    delete $2;
		}
	| ELSE ENDLINE
		{
		    context->else_if();
            context->endline();
        }
	| ENDIF ENDLINE
		{
		    context->end_if();
            context->endline();
        }
    | K_DEFINE define_value
	    {
            context->define(*$1, *$2);
            delete $1;
            delete $2;
        }
    | MACRO_BEGIN param_list MACRO_END define_value
	    {
            context->define(*$1, *$4); // TODO
            delete $1;
            delete $4;
	    }
    | CMD_IF condition K_IF_END
        {
            context->if_condition($2);
        }
    | CMD_ELIF condition K_IF_END
        {
            context->elif_condition($2);
        }
    | CMD_ERROR K_MESSAGE_START K_MESSAGE_END
        {
            context->error(*$3);
            delete $3;
        }
    ;

param_list: /* nix */
      | K_PARAM
      | param_list ',' K_PARAM
      ;

define_value: a_define_value                    { $$ = $1; }
      | define_value a_define_value             { $$ = $1; (*$$) += (*$2); delete $2; }

a_define_value:   K_DEFINE_VALUE_ENDLINE        { $$ = $1; (*$$) = $$->substr(0, $$->size()-1); context->define_line_count++; }
      |           K_DEFINE_VALUE_ESC_ENDLINE    { $$ = $1; (*$$) = $$->substr(0, $$->size()-2); context->define_line_count++; }
      ;

condition:  conditionA OP_OR condition          { $$ = new condition(cot_or, $1, $3); }
      |     conditionA OP_AND condition         { $$ = new condition(cot_and, $1, $3); }
      |     conditionA OP_SE condition          { $$ = new condition(cot_se, $1, $3); }
      |     conditionA OP_GE condition          { $$ = new condition(cot_ge, $1, $3); }
      |     conditionA OP_EQ condition          { $$ = new condition(cot_eq, $1, $3); }
      |     conditionA '>' condition            { $$ = new condition(cot_gt, $1, $3); }
      |     conditionA '<' condition            { $$ = new condition(cot_st, $1, $3); }
      |     conditionA '+' condition            { $$ = new condition(cot_add, $1, $3); }
      |     conditionA '-' condition            { $$ = new condition(cot_sub, $1, $3); }
      |     conditionA                          { $$ = $1; }
      ;

conditionA: NAME                                { $$ = new condition(cot_variable, *$1); delete $1; }
      |     NAME '(' condition_list ')'         { $$ = new condition(cot_macro, *$1, $3); delete $1; }
      |     K_NUMBER                            { $$ = new condition(cot_const, *$1); delete $1; }
      |     K_NUMBER_L                          { $$ = new condition(cot_const, *$1); delete $1; }
      |     '(' condition ')'                   { $$ = $2; }
      |     '!' conditionA                      { $$ = new condition(cot_not, $2); }
      |     K_DEFINED NAME                      { $$ = new condition(cot_defined, *$2); delete $2; }
      |     K_DEFINED '(' NAME ')'              { $$ = new condition(cot_defined, *$3); delete $3; }
      ;

condition_list: condition                       { $$ = new std::vector<condition*>(); $$->push_back($1); }
      |         condition_list ',' condition    { $$ = $1; $$->push_back($3); }

